package com.qik.ui {	import com.qik.data.DataProviderEvent;  import com.qik.data.DataProvider;  import flash.display.DisplayObject;  import flash.display.Sprite;  import flash.geom.Rectangle;  public class List extends Sprite{		private var _items:Array = [];		private var _grid:Array = [];		private var _width:Number;		private var _height:Number;				private var _itemRenderer:IItemRenderer;		private var _dataProvider:DataProvider;				public function List() {			_width = super.width;			_height = super.height;			clearItems();		}				override public function set width(value:Number):void{			_width = value;			redraw();		}				override public function set height(value:Number):void{			_height = value;		}				public function addItem(item:DisplayObject):void{			addItemAt(item, _items.length);		}				public function addItemAt(item:DisplayObject, index:uint):void{      _items.splice(index,0,item);			addChild(item);			redraw();		}				public function removeItem(item:DisplayObject):void{			var len:uint = _items.length;						for(var i:uint = 0; i < len; i++){				if(_items[i] === item){					removeItemAt(i);					break;				}			}		}				public function removeItemAt(index:uint):void{			var items:Array = _items.splice(index,1);			removeChild(items[0]);			redraw();		}				public function clear():void{			_items = [];						clearItems();		}				public function getItemAt(index:uint):DisplayObject{			return _items[index];		}				public function setItemRenderer(value:IItemRenderer):void {      _itemRenderer = value;    }        public function setDataProvider(value:DataProvider):void{    	if(_dataProvider){        clear();        _dataProvider.removeEventListener(DataProviderEvent.NEW_ITEM, onDataProviderEvent);        _dataProvider.removeEventListener(DataProviderEvent.DELETE_ITEM, onDataProviderEvent);        _dataProvider.removeEventListener(DataProviderEvent.CLEAR, onDataProviderEvent);    	}    	    	_dataProvider = value;    	_dataProvider.addEventListener(DataProviderEvent.NEW_ITEM, onDataProviderEvent);    	_dataProvider.addEventListener(DataProviderEvent.DELETE_ITEM, onDataProviderEvent);    	_dataProvider.addEventListener(DataProviderEvent.CLEAR, onDataProviderEvent);    }        private function onDataProviderEvent(event:DataProviderEvent):void {    	switch(event.type){    		case DataProviderEvent.NEW_ITEM:    		  addItemAt(_itemRenderer.create(event.item), event.index);    		  break;    		case DataProviderEvent.DELETE_ITEM:    		  removeItemAt(event.index);    		  break;    		case DataProviderEvent.CLEAR:    		  clear();    		  break;    	}    }    private function redraw():void{			measureGrid();			alignToGrid();		}				private function measureGrid():void{			_grid = [];						var len:uint = _items.length;						var xPos:Number = 0;			var yPos:Number = 0;						var rect:Rectangle;						for(var i:uint = 0; i < len; i++){				rect = new Rectangle(xPos, yPos, _width, _items[i].height);								_grid.push(rect);								yPos += rect.height;			}		}				private function alignToGrid():void{			var len:uint = _items.length;						var item:DisplayObject;			var gridElement:Rectangle;						for(var i:uint = 0; i < len; i++){				item = DisplayObject(_items[i]);				gridElement = Rectangle(_grid[i]);												item.x = gridElement.x;				item.y = gridElement.y;				item.width = gridElement.width;				item.height = gridElement.height;			}		}				private function clearItems():void{			if(numChildren > 0){				removeChildAt(0);				clearItems();			}		}	}	}